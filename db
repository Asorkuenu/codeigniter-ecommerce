-- phpMyAdmin SQL Dump
-- version 4.1.12
-- http://www.phpmyadmin.net
--
-- Host: localhost:3306
-- Generation Time: Jul 29, 2015 at 10:44 AM
-- Server version: 5.5.34
-- PHP Version: 5.5.10

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";

--
-- Database: `ansilvex`
--
CREATE DATABASE IF NOT EXISTS `ansilvex` DEFAULT CHARACTER SET latin1 COLLATE latin1_swedish_ci;
USE `ansilvex`;

-- --------------------------------------------------------

--
-- Table structure for table `categories`
--

DROP TABLE IF EXISTS `categories`;
CREATE TABLE `categories` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=5 ;

--
-- Dumping data for table `categories`
--

INSERT INTO `categories` (`id`, `name`, `date`) VALUES
(1, 'Detergenti', '2015-07-23 15:25:27'),
(2, 'Cadouri', '2015-07-23 20:51:23'),
(3, 'Pentru WC', '2015-07-23 20:57:15'),
(4, 'Categorie', '2015-07-28 18:48:07');

-- --------------------------------------------------------

--
-- Table structure for table `filters`
--

DROP TABLE IF EXISTS `filters`;
CREATE TABLE `filters` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `filter_category` int(11) NOT NULL,
  `name` varchar(25) NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `filter_categories`
--

DROP TABLE IF EXISTS `filter_categories`;
CREATE TABLE `filter_categories` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;

-- --------------------------------------------------------

--
-- Table structure for table `general`
--

DROP TABLE IF EXISTS `general`;
CREATE TABLE `general` (
  `key` varchar(255) NOT NULL,
  `value` text NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`key`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `general`
--

INSERT INTO `general` (`key`, `value`, `date`) VALUES
('about', 'Ansilvex, bun de tot.', '0000-00-00 00:00:00'),
('address', 'Bulevardul Stefan cel Mare 8', '0000-00-00 00:00:00'),
('delivery', 'Gratis de la 250 Lei', '0000-00-00 00:00:00'),
('email', 'info@ansilvex.md', '0000-00-00 00:00:00'),
('lat', '47.0149281', '0000-00-00 00:00:00'),
('link_facebook', '', '0000-00-00 00:00:00'),
('link_google', '', '0000-00-00 00:00:00'),
('link_linkedin', '', '0000-00-00 00:00:00'),
('logo_text', 'Ansilvex', '0000-00-00 00:00:00'),
('long', '28.8469413', '0000-00-00 00:00:00'),
('mobile', '068553311', '0000-00-00 00:00:00'),
('telephone', '022 27 28 72', '0000-00-00 00:00:00');

-- --------------------------------------------------------

--
-- Table structure for table `orders`
--

DROP TABLE IF EXISTS `orders`;
CREATE TABLE `orders` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `order_array` text NOT NULL,
  `processed` tinyint(1) NOT NULL DEFAULT '0',
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=4 ;

--
-- Dumping data for table `orders`
--

INSERT INTO `orders` (`id`, `user_id`, `order_array`, `processed`, `date`) VALUES
(2, NULL, 'a:9:{s:8:"products";a:1:{i:0;a:4:{s:2:"id";i:1;s:4:"name";s:4:"Tews";s:8:"quantity";s:1:"4";s:5:"total";i:80;}}s:6:"prefer";a:1:{s:9:"telephone";s:7:"Telefon";}s:4:"name";s:6:"afsdsf";s:5:"email";s:19:"sdafsadf@gmail.coms";s:9:"telephone";s:5:"adf23";s:7:"address";s:7:"asdfasd";s:7:"message";s:12:"fasdfsadfsda";s:7:"content";s:197:"Comanda de pe site de le afsdsf\nEmail: sdafsadf@gmail.coms\nTelefon: adf23\nAdresa: asdfasd\n\nMesaj: fasdfsadfsda\n\nPrefera sa fie contactat prin: Telefon\n\n\nComanda: \n\nTews x 4 = 80 Lei \n\nTotal: 80 Lei";s:5:"total";i:80;}', 0, '2015-07-25 13:49:17'),
(3, NULL, 'a:9:{s:8:"products";a:3:{i:0;a:4:{s:2:"id";i:4;s:4:"name";s:25:"Tucan odorizant pentru WC";s:8:"quantity";s:1:"4";s:5:"total";i:268;}i:1;a:4:{s:2:"id";i:1;s:4:"name";s:4:"Tews";s:8:"quantity";s:1:"3";s:5:"total";i:60;}i:2;a:4:{s:2:"id";i:3;s:4:"name";s:12:"Gilette PACK";s:8:"quantity";s:1:"1";s:5:"total";i:159;}}s:6:"prefer";a:1:{s:5:"email";s:5:"Email";}s:4:"name";s:6:"Sergiu";s:5:"email";s:21:"ser.finciuc@gmail.com";s:9:"telephone";s:11:"06927923423";s:7:"address";s:20:"Strada trandafirilor";s:7:"message";s:10:"Salut.. !!";s:7:"content";s:284:"Comanda de pe site de le Sergiu\nEmail: ser.finciuc@gmail.com\nTelefon: 06927923423\nAdresa: Strada trandafirilor\n\nMesaj: Salut.. !!\n\nPrefera sa fie contactat prin: Email\n\n\nComanda: \n\nTucan odorizant pentru WC x 4 = 268 Lei \nTews x 3 = 60 Lei \nGilette PACK x 1 = 159 Lei \n\nTotal: 487 Lei";s:5:"total";i:487;}', 0, '2015-07-28 18:39:51');

-- --------------------------------------------------------

--
-- Table structure for table `pages`
--

DROP TABLE IF EXISTS `pages`;
CREATE TABLE `pages` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `content` text NOT NULL,
  `image` varchar(255) NOT NULL,
  `order` int(11) DEFAULT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=2 ;

--
-- Dumping data for table `pages`
--

INSERT INTO `pages` (`id`, `title`, `content`, `image`, `order`, `date`) VALUES
(0, 'Aenean ac euismod', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam porttitor fermentum erat nec ornare. Curabitur semper, est eget dignissim fermentum, urna turpis molestie sapien, sed cursus erat magna ut mauris. Nunc mi dui, sodales at interdum a, fermentum sed nulla. Nunc posuere condimentum metus, a consectetur arcu fringilla id. Curabitur consequat turpis eget arcu eleifend, a molestie orci gravida. Proin turpis turpis, dapibus id nisl quis, rhoncus luctus leo. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum commodo lectus sed ipsum mattis semper. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Aliquam erat volutpat. Suspendisse egestas hendrerit mi quis gravida. Curabitur id arcu vitae eros aliquam congue. Aenean eget dui vitae velit accumsan maximus sit amet sed lectus. Fusce tincidunt quam mi, in bibendum lacus dignissim a. Duis egestas quam ipsum, id elementum nibh finibus in. Proin egestas accumsan diam id porta.\r\n\r\nAliquam elementum, dui nec hendrerit mollis, nisl urna eleifend nibh, quis sodales turpis odio id purus. Donec eget commodo sapien, id tincidunt diam. Cras feugiat arcu dolor, eget elementum lorem vestibulum nec. Nunc in rhoncus enim, iaculis faucibus diam. Suspendisse a tortor porttitor, feugiat nulla nec, laoreet quam. Nunc rhoncus at enim eget lacinia. Maecenas in vulputate nunc. Integer tempus quis ex id commodo. Donec arcu tellus, suscipit a fringilla eget, pellentesque at erat. Donec pharetra eu nisi non facilisis. Sed cursus iaculis velit in cursus. Sed porttitor risus est, et mollis lectus convallis porttitor.\r\n\r\nAenean ac euismod erat, in condimentum urna. Mauris at ornare urna, quis tristique libero. Aenean id efficitur eros. Aliquam elementum interdum felis. Maecenas luctus, nibh ac blandit congue, lorem nisl imperdiet elit, egestas malesuada lectus ex a eros. In diam turpis, tristique in dolor vel, auctor luctus mi. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum imperdiet in eros id ullamcorper. Cras a diam eget orci commodo suscipit. Nulla dapibus eros vitae nisl commodo aliquam. Ut non dui varius, pulvinar massa vitae, viverra sapien. Morbi blandit blandit ultrices. Cras velit leo, elementum in urna non, fringilla tincidunt lorem. Aliquam eget quam vitae quam pharetra fringilla vel id tortor. Mauris in venenatis massa. Curabitur suscipit mauris in gravida luctus.\r\n\r\nPraesent at dui auctor, scelerisque nisl a, pretium felis. Curabitur eget convallis eros. Quisque congue neque diam, id congue arcu sollicitudin non. Ut volutpat placerat vehicula. Donec sagittis augue ac sollicitudin pretium. Praesent vehicula metus id est blandit, ut dignissim eros aliquet. Aliquam in est in tellus varius pellentesque.', '', NULL, '2015-07-25 17:56:47'),
(1, 'Livrare', 'Nam tortor odio, ultricies ut dui nec, gravida vestibulum ipsum. Vivamus neque orci, ullamcorper vel dapibus ac, sollicitudin vitae justo. Aenean eu euismod arcu. Quisque maximus ipsum et nisl porttitor volutpat. Vestibulum a porta diam. Ut sit amet lorem diam. Pellentesque dapibus nisl vitae nibh sagittis pharetra. Duis in pulvinar ligula. Pellentesque viverra eros sed consectetur viverra. Mauris vehicula felis a nisi condimentum sollicitudin. Aliquam odio ligula, ornare sit amet tempor non, consectetur ut augue. In pellentesque vestibulum sem luctus laoreet. Nullam in purus pharetra, dapibus purus sit amet, sagittis risus.\r\n\r\nFusce convallis auctor massa sit amet tincidunt. Proin mollis at sem non consectetur. Fusce fringilla vehicula dolor, ac bibendum urna auctor id. Etiam volutpat lectus at pharetra facilisis. Pellentesque sem arcu, dictum quis magna et, vestibulum gravida nunc. Nunc molestie, ex placerat tristique vestibulum, leo mauris cursus magna, ultricies commodo lectus velit ut justo. Donec ullamcorper placerat nunc, a vehicula nisi. Suspendisse vel felis pharetra, facilisis elit sed, gravida felis. Curabitur feugiat viverra odio, eget dapibus lectus ullamcorper id.\r\n\r\nProin eu sodales urna. Nulla cursus egestas velit vel mollis. Vestibulum tempor lectus massa, id egestas magna congue a. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Pellentesque blandit diam leo, eget feugiat sapien sodales vitae. Aliquam mauris velit, auctor quis diam nec, eleifend bibendum dui. Aenean rhoncus consequat nunc, a rutrum orci aliquam in. Donec sit amet pharetra diam. Ut eu ante placerat elit pulvinar lacinia sit amet vitae urna. Sed id felis at nisi tristique pellentesque a ac tellus. Praesent ut lacus euismod, rutrum libero at, mattis libero. Pellentesque hendrerit, ligula at iaculis placerat, magna dui rhoncus massa, a bibendum dolor orci sed libero.\r\n\r\nVivamus id cursus turpis. Aliquam nec lobortis lectus. Phasellus euismod nisi sit amet congue facilisis. Proin fermentum odio ut dapibus sollicitudin. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nullam rutrum risus vitae neque bibendum, quis iaculis mi dapibus. Duis pretium, dolor id eleifend sodales, erat est sodales metus, semper pretium risus purus at augue. Mauris rutrum tellus sed sapien sodales, eu euismod nisl rhoncus. Cras blandit et urna nec euismod. Mauris at sem lobortis, commodo metus et, suscipit sem. Nunc maximus nibh ac molestie tempus. Proin auctor porta neque non consectetur. Duis tincidunt viverra est a cursus. Mauris eget ipsum non nisl dapibus aliquet. Sed placerat fringilla varius.\r\n', '', NULL, '2015-07-28 18:47:01');

-- --------------------------------------------------------

--
-- Table structure for table `products`
--

DROP TABLE IF EXISTS `products`;
CREATE TABLE `products` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `description` text,
  `category` int(11) NOT NULL,
  `price` varchar(255) NOT NULL,
  `image` varchar(255) DEFAULT NULL,
  `active` int(11) NOT NULL DEFAULT '1',
  `views` int(11) DEFAULT '0',
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=6 ;

--
-- Dumping data for table `products`
--

INSERT INTO `products` (`id`, `name`, `description`, `category`, `price`, `image`, `active`, `views`, `date`) VALUES
(1, 'Tews', 'wefsdaf', 1, '20', 'f43143-megamaxa limona za posodo.jpg', 1, 13, '2015-07-23 16:24:52'),
(2, '312', '3asdf', 1, '234', 'f43143-megamaxa limona za posodo.jpg', 1, 11, '2015-07-23 16:24:42'),
(3, 'Gilette PACK', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin sit amet vestibulum neque. Sed in dolor viverra elit placerat fringilla quis at tellus. Suspendisse tincidunt, est at tempor volutpat, est massa molestie nunc, a feugiat risus lacus sed elit. Cras nec laoreet nibh. Aenean ac condimentum sem, sit amet dapibus risus. Quisque pellentesque tempor vestibulum. Pellentesque eget lorem consectetur, facilisis leo a, mollis tortor. Vivamus consequat laoreet dolor, et posuere neque ultricies quis. Aenean convallis nibh neque, in hendrerit sem sagittis id. Quisque eu dui auctor, venenatis magna ac, convallis libero. Ut imperdiet venenatis nunc, sed dignissim erat tempus auctor.', 2, '159', 'ce5143-gillette-fusion-proglide-razor-gift-set-5-pc_169387.jpg', 1, 5, '2015-07-23 20:52:34'),
(4, 'Tucan odorizant pentru WC', 'Maecenas sit amet lorem eu diam condimentum egestas. Donec id tempor augue. Integer vitae felis nulla. Curabitur in sem augue. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus elementum pretium ante, quis facilisis nisl eleifend quis.', 3, '67', '43c143-tucan-odorizant-wc-pentru-bazin-fresh-150g-12720.jpg', 1, 18, '2015-07-23 20:58:01'),
(5, 'Test pentru categorie', 'Nam tortor odio, ultricies ut dui nec, gravida vestibulum ipsum. Vivamus neque orci, ullamcorper vel dapibus ac, sollicitudin vitae justo. Aenean eu euismod arcu. Quisque maximus ipsum et nisl porttitor volutpat. Vestibulum a porta diam. Ut sit amet lorem diam. Pellentesque dapibus nisl vitae nibh sagittis pharetra. Duis in pulvinar ligula. Pellentesque viverra eros sed consectetur viverra. Mauris vehicula felis a nisi condimentum sollicitudin. Aliquam odio ligula, ornare sit amet tempor non, consectetur ut augue. In pellentesque vestibulum sem luctus laoreet. Nullam in purus pharetra, dapibus purus sit amet, sagittis risus.\r\n\r\nFusce convallis auctor massa sit amet tincidunt. Proin mollis at sem non consectetur. Fusce fringilla vehicula dolor, ac bibendum urna auctor id. Etiam volutpat lectus at pharetra facilisis. Pellentesque sem arcu, dictum quis magna et, vestibulum gravida nunc. Nunc molestie, ex placerat tristique vestibulum, leo mauris cursus magna, ultricies commodo lectus velit ut justo. Donec ullamcorper placerat nunc, a vehicula nisi. Suspendisse vel felis pharetra, facilisis elit sed, gravida felis. Curabitur feugiat viverra odio, eget dapibus lectus ullamcorper id.\r\n\r\nProin eu sodales urna. Nulla cursus egestas velit vel mollis. Vestibulum tempor lectus massa, id egestas magna congue a. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Pellentesque blandit diam leo, eget feugiat sapien sodales vitae. Aliquam mauris velit, auctor quis diam nec, eleifend bibendum dui. Aenean rhoncus consequat nunc, a rutrum orci aliquam in. Donec sit amet pharetra diam. Ut eu ante placerat elit pulvinar lacinia sit amet vitae urna. Sed id felis at nisi tristique pellentesque a ac tellus. Praesent ut lacus euismod, rutrum libero at, mattis libero. Pellentesque hendrerit, ligula at iaculis placerat, magna dui rhoncus massa, a bibendum dolor orci sed libero.\r\n\r\nVivamus id cursus turpis. Aliquam nec lobortis lectus. Phasellus euismod nisi sit amet congue facilisis. Proin fermentum odio ut dapibus sollicitudin. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nullam rutrum risus vitae neque bibendum, quis iaculis mi dapibus. Duis pretium, dolor id eleifend sodales, erat est sodales metus, semper pretium risus purus at augue. Mauris rutrum tellus sed sapien sodales, eu euismod nisl rhoncus. Cras blandit et urna nec euismod. Mauris at sem lobortis, commodo metus et, suscipit sem. Nunc maximus nibh ac molestie tempus. Proin auctor porta neque non consectetur. Duis tincidunt viverra est a cursus. Mauris eget ipsum non nisl dapibus aliquet. Sed placerat fringilla varius.\r\n', 4, '146', '02c143-ansilvex-admin.png', 1, 1, '2015-07-28 18:49:06');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `admin` tinyint(1) NOT NULL DEFAULT '0',
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;
